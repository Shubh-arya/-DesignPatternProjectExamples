package data_strucuture_and_algorithms.binarysearch;

public class OrderAgnosticBinarySearch {

	public static void main(String[] args) {
//		int[] arr = { -18, -12, -4, 0, 2, 3, 4, 15, 16, 18, 22, 45, 89 };
		int[] arr = { 99, 80, 75, 22, 11, 10, 5, 2, -3 };
		int target = 22;
		int ans = orderAgnosticBS(arr, target);
		System.out.println(ans);
	}

	private static int orderAgnosticBS(int[] arr, int target) {
		int startIndex = 0;
		int endIndex = arr.length - 1;
		boolean isDescOrder = true;
		if (arr[startIndex] > arr[endIndex]) {
			isDescOrder = true;
		}

		while (startIndex <= endIndex) {
			int midIndex = startIndex + (endIndex - startIndex) / 2;
			int midElement = arr[midIndex];
			
			if(target == midElement) {
				return midIndex;
			}

			if (isDescOrder) {
				if (target < midElement) {
					startIndex = midIndex + 1;
				} else if (target < midElement) {
					endIndex = midIndex - 1;
				} 
			} else {
				if (target > midElement) {
					startIndex = midIndex + 1;
				} else if (target < midElement) {
					endIndex = midIndex - 1;
				} 
			}
		}

		return -1;
	}
}
